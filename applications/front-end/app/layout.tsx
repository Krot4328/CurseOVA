/* eslint-disable import/no-default-export */

import { type Metadata } from 'next'

import { Roboto } from 'next/font/google'
import { cookies } from 'next/headers'

import logger from 'loglevel'

import { createAxiosBaseQuery } from '@boilerplate/core/builders/axios-base-query.builder'
import { type HttpClientResponse, Method } from '@boilerplate/core/interfaces/http'
import { Role } from '@boilerplate/core/interfaces/user'

import { GetProfileMyUrl } from '@boilerplate/types/auth/dto/requests/profile'
import { type MyProfile } from '@boilerplate/types/auth/interfaces/profile'

import { ReduxProvider } from '@boilerplate/front-end/store/provider'

import 'bootstrap/dist/css/bootstrap.min.css'
import '@boilerplate/front-end/app/global.scss'

import { Header } from '@boilerplate/front-end/components/header'
import { Footer } from '@boilerplate/front-end/components/footer'

export interface RootLayoutProps {
  readonly children: React.ReactNode
}

const roboto = Roboto({
  subsets: ['cyrillic', 'cyrillic-ext', 'greek', 'greek-ext', 'latin', 'latin-ext', 'vietnamese'],
  weight: ['400', '500', '700'],
  variable: '--font-roboto',
  display: 'swap',
})

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
}

const RootLayout: React.FC<RootLayoutProps> = async ({ children }) => {
  const cookieStore = cookies()

  const { value: token } = cookieStore.get('jwt') || {}

  let profile: MyProfile | null = null

  if (token) {
    try {
      const request = createAxiosBaseQuery()

      const response = (await request({
        method: Method.Get,
        url: GetProfileMyUrl,
        params: {
          role: Role.User,
        },
        headers: {
          Authorization: `Bearer ${token}`,
        },
      })) as HttpClientResponse<MyProfile>

      if (response.error) {
        throw new Error(response.error)
      }

      profile = response.data
    } catch (error) {
      logger.error(error)
    }
  }

  return (
    <html lang="en" className={roboto.className}>
      <head>
        <meta name="format-detection" content="telephone=no, date=no, email=no, address=no" />
      </head>
      <body>
        <ReduxProvider profile={profile}><Header />{children}<Footer /></ReduxProvider>
      </body>
    </html>
  )
}

logger.setLevel('debug')

export default RootLayout
